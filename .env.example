// graphql 테스트용
mutation CreateUserTest {
  createUser(data: {email: "test@test.com", firstName: "test", lastName: "kim", password: "testest"}) {
    id
    email
    firstName
    lastName
    password
    isSync
  }
}

mutation CreateUserTest2 {
  createUser(data: {email: "kk@kk.com", firstName: "kk", lastName: "lee", password: "kk"}) {
    id
    email
    firstName
    lastName
    password
    isSync
  }
}

query getUsersTest {
  getUsers {
    id
    email
    firstName
    lastName
    isSync
    googleToken {
      refreshToken
      id
    }
    events {
      description
    }
  }
}

query getUserTest {
  getUser (id: 1) {
    id
    email
    firstName
    lastName
    isSync
    googleToken {
      refreshToken
    }
  }
}

query getUserTestRefresh {
  getUser (id: 2) {
    id
    email
    firstName
    lastName
    isSync
    googleToken {
      refreshToken
    }
  }
}

mutation LoginUserTest {
  loginUser(email: "test@test.com", password: "testest") {
    id
    email
    firstName
    lastName
    password
    isSync
  }
}

query Profile {
  getProfile {
      id
      email
      firstName
      lastName
      isSync
      picture
  }
}

mutation createEvent {
  createEvent (data: {summary: "aaaaa", description: "jay", startDateTime: "2022-03-28T23:52", endDateTime: "2022-03-30T23:52"}) {
                summary
            description
            startDateTime
            endDateTime
            status
  }
}


// 관계도 확인용
// 유저를 삭제하면 refresh token db는 같이 삭제, event는 null 값으로 변경
// refresh token db를 삭제하면, user db의 refreshtokenId 값은 null
@Mutation(() => Boolean)
async deleteUser(@Arg('deid', () => Int) deid: number) {
    await User.delete({ id: deid });
    return true;
}

@Mutation(() => Boolean)
async deleteToken(@Arg('deid', () => Int) deid: number) {
    await GoogleToken.delete({ id: deid });
    return true;
}

@Mutation(() => Boolean)
async deleteEvent(@Arg('deid', () => Int) deid: number) {
    await Event.delete({ id: deid });
    return true;
}

mutation deleteUser {
  deleteUser(deid: 1)
}

mutation deleteToken {
  deleteToken(deid:2)
}

mutation deleteEvent {
  deleteEvent (deid: 1)
}